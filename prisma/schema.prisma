generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(uuid())
  countryId     String
  name          String
  googlePlaceId String?  @unique
  lat           Float?
  lng           Float?
  country       Country  @relation(fields: [countryId], references: [id])
  schools       School[]
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  city City[]
}

model Notification {
  id             String        @id @default(uuid())
  isSeen         Boolean       @default(false)
  createdAt      DateTime      @unique @default(now()) @db.DateTime(0)
  postReactionId String?       @unique
  followshipId   String?       @unique
  userId         String
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postReaction   PostReaction? @relation(fields: [postReactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followship     Followship?   @relation(fields: [followshipId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model School {
  id            String  @id @default(uuid())
  name          String
  googlePlaceId String? @unique
  lat           Float?
  lng           Float?
  cityId        String
  city          City    @relation(fields: [cityId], references: [id])
  posts         Post[]
  users         User[]
}

model Training {
  id   String @id @default(uuid())
  name String @unique
  user User[]
}

model User {
  id                           String                            @id @default(uuid())
  firstName                    String?
  lastName                     String?
  email                        String                            @unique
  roles                        String                            @db.LongText
  password                     String
  birthdate                    DateTime?                         @db.Date
  pictureId                    String?
  snapchat                     String?
  instagram                    String?
  resetToken                   String?
  isVerified                   Boolean                           @default(true)
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime?
  isActive                     Boolean                           @default(true)
  isFilled                     Boolean                           @default(false)
  androidPushnotificationToken String?
  sendbirdAccessToken          String?
  iosPushnotificationToken     String?
  about                        String?
  locale                       String?
  trainingId                   String?
  schoolId                     String?
  avatar3dId                   String?
  school                       School?                           @relation(fields: [schoolId], references: [id])
  training                     Training?                         @relation(fields: [trainingId], references: [id])
  expoPushNotificationTokens   ExpoPushNotificationAccessToken[]
  followeesFollowships         Followship[]                      @relation("followees")
  followersFollowships         Followship[]                      @relation("followers")
  posts                        Post[]
  postComments                 PostComment[]
  postReactions                PostReaction[]
  notifications                Notification[]
  tags                         Tag[]
}

model Followship {
  id           String         @unique @default(uuid())
  followerId   String
  followeeId   String
  createdAt    DateTime       @unique @default(now())
  followee     User           @relation("followees", fields: [followeeId], references: [id], onDelete: Cascade)
  follower     User           @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@id([followerId, followeeId])
}

model Tag {
  id        String   @id @default(uuid())
  text      String   @unique
  createdAt DateTime @default(now())
  authorId  String?
  isLive    Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id], onUpdate: SetNull)
  posts     Post[]
}

model Post {
  id         String         @id @default(uuid())
  text       String         @db.Text
  createdAt  DateTime       @unique @default(now())
  authorId   String
  viewsCount Int            @default(0)
  schoolId   String?
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  school     School?        @relation(fields: [schoolId], references: [id])
  comments   PostComment[]
  reactions  PostReaction[]
  tags       Tag[]

  @@unique([authorId, id], map: "author_post_id_fkey")
}

model PostComment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @unique @default(now())
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostReaction {
  id           String         @id @default(uuid())
  createdAt    DateTime       @unique @default(now())
  reaction     String
  postId       String
  authorId     String
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@unique([authorId, postId], map: "author_post_id_fkey")
}

model ExpoPushNotificationAccessToken {
  id     String @id @default(uuid())
  userId String
  token  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
