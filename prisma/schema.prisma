generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(dbgenerated("generate_id()"))
  countryId     String
  name          String
  googlePlaceId String?  @unique
  lat           Float?
  lng           Float?
  country       Country  @relation(fields: [countryId], references: [id])
  schools       School[]

  @@index([countryId])
}

model Country {
  id   String @id @default(dbgenerated("generate_id()"))
  code String @unique
  city City[]
  user User[]
}

model Notification {
  id                String           @id @default(dbgenerated("generate_id()"))
  isSeen            Boolean          @default(false)
  createdAt         DateTime         @default(now())
  userId            String
  type              NotificationType
  postReactionId    BigInt?          @unique
  postReaction      PostReaction?    @relation(fields: [postReactionId], references: [id], onDelete: Cascade)
  tagId             BigInt?
  tag               Tag?             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  postId            BigInt?
  post              Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  followerUser      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  followerUserId    String?
  newPostCount      Int?
  postUserMention   PostUserMention? @relation(fields: [postUserMentionId], references: [id], onDelete: Cascade)
  postUserMentionId BigInt?          @unique

  @@index([createdAt], map: "Notification_createdAt")
  @@index([userId])
}

model School {
  id            String  @id @default(dbgenerated("generate_id()"))
  name          String
  googlePlaceId String? @unique
  lat           Float?
  lng           Float?
  cityId        String
  city          City    @relation(fields: [cityId], references: [id])
  users         User[]
}

model Training {
  id   String @id @default(dbgenerated("generate_id()"))
  name String @unique
  user User[]
}

model User {
  id                           String                            @id @default(dbgenerated("generate_id()"))
  firstName                    String?
  lastName                     String?
  displayName                  String?
  username                     String?                           @unique
  email                        String?                           @unique
  role                         UserRole                          @default(USER)
  password                     String?
  pictureId                    String?
  snapchat                     String?
  instagram                    String?
  tiktok                       String?
  resetToken                   String?
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime                          @default(now()) @updatedAt
  isActive                     Boolean                           @default(true)
  isBanned                     Boolean                           @default(false)
  isFilled                     Boolean                           @default(false)
  androidPushnotificationToken String?
  iosPushnotificationToken     String?
  about                        String?
  locale                       String?
  trainingId                   String?
  schoolId                     String?
  countryId                    String?
  country                      Country?                          @relation(fields: [countryId], references: [id])
  phoneNumber                  String?                           @unique
  school                       School?                           @relation(fields: [schoolId], references: [id])
  training                     Training?                         @relation(fields: [trainingId], references: [id])
  expoPushNotificationTokens   ExpoPushNotificationAccessToken[]
  posts                        Post[]
  postReactions                PostReaction[]
  postPollVotes                PostPollVote[]
  followees                    Follower[]                        @relation("usersAsFollowees")
  followers                    Follower[]                        @relation("usersAsFollowers")
  viewsCount                   Int                               @default(0)
  tags                         Tag[]
  memberOfTags                 Tag[]                             @relation("memberOfTags")
  notifications                Notification[]
  postMentions                 PostUserMention[]
  blockedUsers                 User[]                            @relation("blockedUsers")
  blockedByUsers               User[]                            @relation("blockedUsers")
  reports                      UserReport[]                      @relation("reportAuthors")
  reported                     UserReport[]                      @relation("userReports")
}

model Follower {
  id         String   @unique @default(dbgenerated("generate_id()"))
  userId     String
  followeeId String
  createdAt  DateTime @default(now())
  user       User     @relation("usersAsFollowees", fields: [userId], references: [id], onDelete: Cascade)
  followee   User     @relation("usersAsFollowers", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([userId, followeeId])
}

model Tag {
  id                BigInt         @id @default(dbgenerated("generate_id()"))
  nanoId            String?        @unique
  text              String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  expiresAt         DateTime?
  type              TagType        @default(STANDARD)
  posts             Post[]
  isHidden          Boolean        @default(false)
  author            User?          @relation(fields: [authorId], references: [id])
  authorId          String?
  viewsCount        Int            @default(0)
  shareCount        Int            @default(0)
  interactionsCount Int            @default(0)
  notifications     Notification[]
  score             Float?         @default(0)
  scoreFactor       Float?         @default(1)
  members           User[]         @relation("memberOfTags")
  isPublic          Boolean        @default(false)

  @@index([createdAt])
  @@index([authorId])
  @@index([isHidden])
}

model Post {
  id            BigInt            @id @default(dbgenerated("generate_id()"))
  text          String            @db.Text
  createdAt     DateTime          @unique @default(now())
  authorId      String
  viewsCount    Int               @default(0)
  author        User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tag           Tag               @relation(fields: [tagId], references: [id])
  reactions     PostReaction[]
  pollOptions   PostPollOption[]
  pollVotes     PostPollVote[]
  children      Post[]            @relation("parentChildren")
  parent        Post?             @relation("parentChildren", fields: [parentId], references: [id])
  parentId      BigInt?
  notifications Notification[]
  charsCount    Int?
  wordsCount    Int?
  userMentions  PostUserMention[]
  tagId         BigInt

  @@index([authorId])
}

model PostUserMention {
  id             BigInt        @id @default(dbgenerated("generate_id()"))
  createdAt      DateTime      @default(now())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId         BigInt
  post           Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification   Notification?
  notificationId String?

  @@index([postId])
}

model PostPollOption {
  id       BigInt         @id @default(dbgenerated("generate_id()"))
  text     String
  post     Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   BigInt
  position Int
  votes    PostPollVote[]

  @@index([postId])
}

model PostPollVote {
  id        BigInt         @id @default(dbgenerated("generate_id()"))
  option    PostPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId  BigInt
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    BigInt
  authorId  String
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@unique([authorId, postId])
  @@index([optionId])
  @@index([postId])
}

model PostReaction {
  id             BigInt        @id @default(dbgenerated("generate_id()"))
  createdAt      DateTime      @default(now())
  text           String
  postId         BigInt
  authorId       String
  author         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post           Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification   Notification?
  notificationId String?

  @@unique([authorId, postId])
}

model ExpoPushNotificationAccessToken {
  id     String @id @default(dbgenerated("generate_id()"))
  userId String
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserReport {
  id        BigInt   @id @default(dbgenerated("generate_id()"))
  createdAt DateTime @default(now())
  userId    String
  authorId  String
  author    User     @relation(name: "reportAuthors", fields: [authorId], references: [id], onDelete: Cascade)
  user      User     @relation(name: "userReports", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([authorId, userId])
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  REPLIED_TO_YOUR_POST
  REPLIED_TO_SAME_POST_AS_YOU
  REACTED_TO_YOUR_POST
  IS_NOW_FOLLOWING_YOU
  THERE_ARE_NEW_POSTS_ON_YOUR_TAG
  USER_MENTIONED_YOU
}

enum TagType {
  STANDARD
  BREAKING
  VERSUS
  POLL
}
