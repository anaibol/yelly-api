generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(uuid())
  countryId     String
  name          String
  googlePlaceId String?  @unique
  lat           Float?
  lng           Float?
  country       Country  @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  schools       School[]

}

model Country {
  id   String @id @default(uuid())
  name String @unique
  city City[]

}

model Notification {
  id           String              @id @default(uuid())
  userSourceId String
  userTargetId String?
  action       NotificationAction?
  isSeen       Boolean
  createdAt    DateTime            @unique @default(now()) @db.DateTime(0)
  itemId       String?
  userSource   User                @relation("userSource", fields: [userSourceId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user         User?               @relation(fields: [userTargetId], references: [id], onDelete: Cascade, onUpdate: Restrict)

}

model School {
  id            String  @id @default(uuid())
  name          String
  googlePlaceId String? @unique
  lat           Float?
  lng           Float?
  cityId        String
  city          City    @relation(fields: [cityId], references: [id])
  User          User[]

}

model Training {
  id   String @id @default(uuid())
  name String @unique

  User User[]
}

model User {
  id                           String         @id @default(uuid())
  firstName                    String?
  lastName                     String?
  email                        String         @unique
  roles                        String         @db.LongText
  password                     String
  birthdate                    DateTime?      @db.Date
  pictureId                    String?
  snapchat                     String?
  instagram                    String?
  resetToken                   String?
  isVerified                   Boolean        @default(true)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime?
  isActive                     Boolean        @default(true)
  isFilled                     Boolean        @default(false)
  androidPushnotificationToken String?
  sendbirdAccessToken          String?
  expoPushNotificationToken    String?
  iosPushnotificationToken     String?
  about                        String?
  locale                       String?
  notification                 Notification[] @relation("userSource")
  notifications                Notification[]
  posts                        Post[]
  postComments                 PostComment[]
  tags                         Tag[]
  followers                    Followship[]             @relation("followees")
  followees                    Followship[]             @relation("followers")
  postReactions                PostReaction[]

  trainingId String?
  schoolId   String?
  school     School?   @relation(fields: [schoolId], references: [id])
  training   Training? @relation(fields: [trainingId], references: [id])

}

model Followship {
  follower   User     @relation("followees", fields: [followeeId], references: [id])
  followerId String
  followee   User     @relation("followers", fields: [followerId], references: [id])
  followeeId String
  createdAt  DateTime @unique @default(now())

  @@id([followerId, followeeId])
}

model Tag {
  id        String   @id @default(uuid())
  text      String   @unique
  createdAt DateTime @default(now())
  authorId  String
  isLive    Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  posts     Post[]

}

model Post {
  id         String         @id @default(uuid())
  text       String         @db.Text
  createdAt  DateTime       @unique @default(now())
  authorId   String
  author     User           @relation(fields: [authorId], references: [id])
  tags       Tag[]
  reactions  PostReaction[]
  viewsCount Int            @default(0)


  @@unique([authorId, id], map: "author_post_id_fkey")
}

model PostComment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @unique @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])


}

enum NotificationAction {
  seen
  add
  groupMembershipRequest
}

model PostReaction {
  id        String   @id @default(uuid())
  createdAt DateTime @unique @default(now())
  reaction  String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String
  authorId  String

  @@unique([authorId, postId], map: "author_post_id_fkey")
}
