generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(dbgenerated("generate_id()"))
  countryId     String
  name          String
  googlePlaceId String?  @unique
  lat           Float?
  lng           Float?
  country       Country  @relation(fields: [countryId], references: [id])
  schools       School[]

  @@index([countryId])
}

model Country {
  id   String @id @default(dbgenerated("generate_id()"))
  code String @unique
  city City[]
  tag  Tag[]
  user User[]
}

model Notification {
  id              String            @id @default(dbgenerated("generate_id()"))
  isSeen          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  userId          String
  followRequestId String?
  followRequest   FollowRequest?    @relation(fields: [followRequestId], references: [id], onDelete: Cascade)
  type            NotificationType?
  postReactionId  BigInt?           @unique
  postReaction    PostReaction?     @relation(fields: [postReactionId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "Notification_createdAt")
  @@index([userId])
}

model FeedItem {
  id        BigInt       @id @default(dbgenerated("generate_id()"))
  isSeen    Boolean      @default(false)
  createdAt DateTime     @default(now())
  postId    String?
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      FeedItemType
  userId    String

  @@index([createdAt], map: "FeedItem_createdAt")
}

model School {
  id            String  @id @default(dbgenerated("generate_id()"))
  name          String
  googlePlaceId String? @unique
  lat           Float?
  lng           Float?
  cityId        String
  city          City    @relation(fields: [cityId], references: [id])
  users         User[]
}

model Training {
  id   String @id @default(dbgenerated("generate_id()"))
  name String @unique
  user User[]
}

model User {
  id                           String                            @id @default(dbgenerated("generate_id()"))
  firstName                    String?
  lastName                     String?
  email                        String?                           @unique
  role                         UserRole                          @default(USER)
  password                     String?
  birthdate                    DateTime?                         @db.Date
  pictureId                    String?
  snapchat                     String?
  instagram                    String?
  resetToken                   String?
  isVerified                   Boolean                           @default(true)
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime                          @default(now()) @updatedAt
  isActive                     Boolean                           @default(true)
  isBanned                     Boolean                           @default(false)
  isFilled                     Boolean                           @default(false)
  androidPushnotificationToken String?
  sendbirdAccessToken          String?
  iosPushnotificationToken     String?
  about                        String?
  locale                       String?
  trainingId                   String?
  schoolId                     String?
  countryId                    String?
  country                      Country?                          @relation(fields: [countryId], references: [id])
  phoneNumber                  String?                           @unique
  school                       School?                           @relation(fields: [schoolId], references: [id])
  training                     Training?                         @relation(fields: [trainingId], references: [id])
  expoPushNotificationTokens   ExpoPushNotificationAccessToken[]
  followRequestRequester       FollowRequest[]                   @relation("followRequestRequester")
  followRequestToUser          FollowRequest[]                   @relation("followRequestToUser")
  posts                        Post[]
  postReactions                PostReaction[]
  postPollVotes                PostPollVote[]
  followees                    Follower[]                        @relation("usersAsFollowees")
  followers                    Follower[]                        @relation("usersAsFollowers")
  feedItems                    FeedItem[]
  viewsCount                   Int                               @default(0)
  tags                         Tag[]
  feedCursor                   UserFeedCursor[]

  @@index([birthdate], map: "User_birthdate")
}

model FollowRequest {
  id             String              @id @default(dbgenerated("generate_id()"))
  requesterId    String
  toFollowUserId String
  createdAt      DateTime            @default(now())
  status         FollowRequestStatus @default(PENDING)
  requester      User                @relation("followRequestRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  toFollowUser   User                @relation("followRequestToUser", fields: [toFollowUserId], references: [id], onDelete: Cascade)
  notifications  Notification[]

  @@index([requesterId, toFollowUserId])
}

model Follower {
  id         String   @unique @default(dbgenerated("generate_id()"))
  userId     String
  followeeId String
  createdAt  DateTime @default(now())
  user       User     @relation("usersAsFollowees", fields: [userId], references: [id], onDelete: Cascade)
  followee   User     @relation("usersAsFollowers", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([userId, followeeId])
}

model Tag {
  id          String           @id @default(dbgenerated("generate_id()"))
  text        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  isLive      Boolean          @default(false)
  posts       Post[]
  countryId   String?
  country     Country?         @relation(fields: [countryId], references: [id])
  isEmoji     Boolean          @default(false)
  isHidden    Boolean          @default(false)
  feedEvents  FeedEvent[]
  author      User?            @relation(fields: [authorId], references: [id])
  authorId    String?
  feedCursors UserFeedCursor[]

  @@index([createdAt])
  @@index([isLive, countryId])
}

model Post {
  id          String           @id @default(dbgenerated("generate_id()"))
  text        String           @db.Text
  createdAt   DateTime         @unique @default(now())
  authorId    String
  viewsCount  Int              @default(0)
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        Tag[]
  reactions   PostReaction[]
  pollOptions PostPollOption[]
  pollVotes   PostPollVote[]
  expiresIn   Int?
  expiresAt   DateTime?
  children    Post[]           @relation("parentChildren")
  parent      Post?            @relation("parentChildren", fields: [parentId], references: [id])
  parentId    String?
  thread      Thread?          @relation(fields: [threadId], references: [id])
  threadId    String?
  feedItems   FeedItem[]
  feedEvents  FeedEvent[]
  charsCount  Int?
  wordsCount  Int?

  @@index([authorId])
  @@index([expiresAt])
}

model PostPollOption {
  id       String         @id @default(dbgenerated("generate_id()"))
  text     String
  post     Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  position Int
  votes    PostPollVote[]

  @@index([postId])
}

model PostPollVote {
  id        String         @id @default(dbgenerated("generate_id()"))
  option    PostPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId  String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  authorId  String
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())

  @@unique([authorId, postId])
  @@index([optionId])
  @@index([postId])
}

model PostReaction {
  id           BigInt        @id @default(dbgenerated("generate_id()"))
  createdAt    DateTime      @default(now())
  text         String
  postId       String
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  notification Notification?
  feedEvents   FeedEvent[]

  @@unique([authorId, postId])
}

model ExpoPushNotificationAccessToken {
  id     String @id @default(dbgenerated("generate_id()"))
  userId String
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  FOLLOW_REQUEST_PENDING
  FOLLOW_REQUEST_ACCEPTED
  POST_REACTION
}

enum FeedItemType {
  FOLLOWEE_POSTED
  POST_REPLIED
  SAME_POST_REPLIED
  SAME_SCHOOL_POSTED
}

model Thread {
  id    String @id @default(dbgenerated("generate_id()"))
  posts Post[]
}

model FeedEvent {
  id                          BigInt           @id @default(dbgenerated("generate_id()"))
  postId                      String
  post                        Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId                       String
  tag                         Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)
  postReactionAuthorBirthdate DateTime?        @db.Date
  postAuthorBirthdate         DateTime?        @db.Date
  postReactionAuthorSchoolId  String?
  postAuthorSchoolId          String?
  postReactionId              BigInt?
  postReaction                PostReaction?    @relation(fields: [postReactionId], references: [id], onDelete: Cascade)
  type                        FeedEventType
  createdAt                   DateTime         @default(now())

  @@index([createdAt])
}

model UserFeedCursor {
  id          BigInt    @id @default(dbgenerated("generate_id()"))
  tagId       String
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cursor      String
}

enum FeedEventType {
  POST_CREATED
  POST_REACTION_CREATED
  POST_REPLY_CREATED
}

// < 24hs
// [
//   D posted p at T2 (D follow status / same school / followed by someone i follow / birth year <= my year of birth)
//   A (followee) liked p  at T3
//   B (same scholl) reacted to p at T4
//   C liked p2 at T5
//   E seen p2.tag
// ]

// followed: false
// same school: true
// same year: false

// E following A

// getAllPostsByTag = [
//   postsByFollowed order by reactions count,
//   postsFroSameSchool order by reactions count,
//   postsByFollowedByFollowed order by reactions count,
//   postsFromSameYear order by reactions count,
//   otherPosts order by reactions count
// ] = unique by postId
