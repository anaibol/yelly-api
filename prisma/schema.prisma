generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(uuid())
  countryId     String
  name          String
  googlePlaceId String?  @unique
  lat           Float?
  lng           Float?
  country       Country  @relation(fields: [countryId], references: [id])
  schools       School[]

  @@index([countryId], map: "City_countryId_fkey")
}

model Country {
  id   String @id @default(uuid())
  code String @unique
  city City[]
}

model Notification {
  id              String         @id @default(uuid())
  isSeen          Boolean        @default(false)
  createdAt       DateTime       @default(now())
  postReactionId  String?
  userId          String
  friendRequestId String?
  friendRequest   FriendRequest? @relation(fields: [friendRequestId], references: [id], onDelete: Cascade)
  postReaction    PostReaction?  @relation(fields: [postReactionId], references: [id], onDelete: Cascade)
}

model School {
  id            String                @id @default(uuid())
  name          String
  googlePlaceId String?               @unique
  lat           Float?
  lng           Float?
  cityId        String
  coord         Unsupported("point")?
  city          City                  @relation(fields: [cityId], references: [id])
  posts         Post[]
  users         User[]

  @@index([cityId], map: "School_cityId_fkey")
}

model Training {
  id   String @id @default(uuid())
  name String @unique
  user User[]
}

model User {
  id                           String                            @id @default(uuid())
  firstName                    String?
  lastName                     String?
  email                        String?                           @unique
  roles                        String                            @db.LongText
  password                     String?
  birthdate                    DateTime?                         @db.Date
  pictureId                    String?
  snapchat                     String?
  instagram                    String?
  resetToken                   String?
  isVerified                   Boolean                           @default(true)
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime?                          @updatedAt
  isActive                     Boolean                           @default(true)
  isFilled                     Boolean                           @default(false)
  androidPushnotificationToken String?
  sendbirdAccessToken          String?
  iosPushnotificationToken     String?
  about                        String?
  locale                       String?
  trainingId                   String?
  schoolId                     String?
  avatar3dId                   String?
  phoneNumber                  String?                           @unique
  userId                       String?
  school                       School?                           @relation(fields: [schoolId], references: [id])
  training                     Training?                         @relation(fields: [trainingId], references: [id])
  expoPushNotificationTokens   ExpoPushNotificationAccessToken[]
  friendUserFriends            Friend[]                          @relation("friendUserFriends")
  friends                      Friend[]                          @relation("userFriends")
  friendRequestFromUser        FriendRequest[]                   @relation("friendRequestFromUser")
  friendRequestToUser          FriendRequest[]                   @relation("friendRequestToUser")
  posts                        Post[]
  postComments                 PostComment[]
  postReactions                PostReaction[]

  @@index([birthdate], map: "User_birthdate")
  @@index([schoolId], map: "User_schoolId_fkey")
  @@index([trainingId], map: "User_trainingId_fkey")
}

model FriendRequest {
  id             String              @id @default(uuid())
  fromUserId     String
  toUserId       String
  createdAt      DateTime            @default(now())
  status         FriendRequestStatus @default(PENDING)
  fromUser       User                @relation("friendRequestFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser         User                @relation("friendRequestToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  notifications  Notification[]

  @@index([toUserId], map: "FriendRequest_toUserId_fkey")
}

model Friend {
  id          String   @unique @default(uuid())
  userId      String
  otherUserId String
  createdAt   DateTime @default(now())
  otherUser   User     @relation("friendUserFriends", fields: [otherUserId], references: [id], onDelete: Cascade)
  user        User     @relation("userFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, otherUserId])
  @@index([otherUserId], map: "Friend_otherUserId_fkey")
}

model Tag {
  id        String   @id @default(uuid())
  text      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  isLive    Boolean  @default(false)
  posts     Post[]

  @@index([text], map: "Tag_text_idx")
}

model Post {
  id         String         @id @default(uuid())
  text       String         @db.Text
  createdAt  DateTime       @unique @default(now())
  authorId   String
  viewsCount Int            @default(0)
  schoolId   String?
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  school     School?        @relation(fields: [schoolId], references: [id])
  comments   PostComment[]
  reactions  PostReaction[]
  tags       Tag[]

  @@unique([authorId, id], map: "author_post_id_fkey")
  @@index([schoolId], map: "Post_schoolId_fkey")
}

model PostComment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @unique @default(now())
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId], map: "PostComment_authorId_fkey")
  @@index([postId], map: "PostComment_postId_fkey")
}

model PostReaction {
  id           String        @id @default(uuid())
  createdAt    DateTime      @unique @default(now())
  reaction     String
  postId       String
  authorId     String
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  notification Notification?

  @@unique([authorId, postId], map: "author_post_id_fkey")
  @@index([postId], map: "PostReaction_postId_fkey")
}

model ExpoPushNotificationAccessToken {
  id     String @id @default(uuid())
  userId String
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ExpoPushNotificationAccessToken_userId_fkey")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
