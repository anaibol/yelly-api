generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id            Bytes          @id @db.Binary(16)
  countryId     Bytes?         @map("country_id") @db.Binary(16)
  name          String         @db.VarChar(255)
  googlePlaceId String?        @unique @map("google_place_id") @db.VarChar(255)
  lat           String?        @db.VarChar(255)
  lng           String?        @db.VarChar(255)
  isValid       Boolean?       @map("is_valid")
  country       Country?       @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_2D5B0234F92F3E70")
  userTraining  UserTraining[]
  schools School[]

  @@index([countryId], map: "IDX_2D5B0234F92F3E70")
  @@map("city")
}

model Country {
  id     Bytes    @id @db.Binary(16)
  name   String   @unique @db.VarChar(255)
  city   City[]
  school School[]
  @@map("country")
}

model DoctrineMigrationVersions {
  version       String    @id
  executedAt    DateTime? @map("executed_at") @db.DateTime(0)
  executionTime Int?      @map("execution_time")
  @@map("doctrine_migration_versions")
}

model Group {
  id                     Bytes                    @id @db.Binary(16)
  ownerId                Bytes?                   @map("owner_id") @db.Binary(16)
  name                   String                   @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  createdAt              DateTime                 @map("created_at") @db.DateTime(0)
  updatedAt              DateTime?                @map("updated_at") @db.DateTime(0)
  user                   User?                    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_6DC044C57E3C61F9")
  groupMembers           GroupMembers[]
  groupMembershipRequest GroupMembershipRequest[]
  @@index([ownerId], map: "IDX_6DC044C57E3C61F9")
  @@map("group")
}

model GroupMembers {
  id          Bytes     @id @db.Binary(16)
  groupInfoId Bytes     @map("group_info_id") @db.Binary(16)
  userId      Bytes     @map("user_id") @db.Binary(16)
  role        String?   @db.VarChar(255)
  createdAt   DateTime  @map("created_at") @db.DateTime(0)
  updatedAt   DateTime? @map("updated_at") @db.DateTime(0)
  banned      Boolean?
  group       Group     @relation(fields: [groupInfoId], references: [id], onUpdate: Restrict, map: "FK_C3A086F3DB8B95F4")
  user        User      @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "FK_C3A086F3A76ED395")
  @@index([userId], map: "IDX_C3A086F3A76ED395")
  @@index([groupInfoId], map: "IDX_C3A086F3DB8B95F4")
  @@map("group_members")
}

model Notification {
  id           Bytes               @id @db.Binary(16)
  userSourceId Bytes               @map("user_source_id") @db.Binary(16)
  userTargetId Bytes?              @map("user_target_id") @db.Binary(16)
  action       NotificationAction?
  isSeen       Boolean             @map("is_seen")
  createdAt    DateTime            @unique @map("created_at") @db.DateTime(0)
  itemId       String?             @map("item_id") @db.VarChar(255)
  userSource   User                @relation("userSource", fields: [userSourceId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_BF5476CA95DC9185")
  user         User?               @relation(fields: [userTargetId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_BF5476CA156E8682")
  @@index([userTargetId], map: "IDX_BF5476CA156E8682")
  @@index([userSourceId], map: "IDX_BF5476CA95DC9185")
  @@map("notification")
}

model School {
  id            Bytes          @id @db.Binary(16)
  countryId     Bytes?         @map("country_id") @db.Binary(16)
  name          String         @db.VarChar(255)
  postalCode    String?        @map("postal_code") @db.VarChar(255)
  googlePlaceId String?        @unique @map("google_place_id") @db.VarChar(255)
  lat           String?        @db.VarChar(255)
  lng           String?        @db.VarChar(255)
  isValid       Boolean?       @map("is_valid")
  cityId        Bytes?         @map("city_id") @db.Binary(16)
  city          City?          @relation(fields: [cityId], references: [id])
  country       Country?       @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_F99EDABBF92F3E70")
  userTraining  UserTraining[]
  @@index([countryId], map: "IDX_F99EDABBF92F3E70")
  @@map("school")
}

model Training {
  id           Bytes          @id @db.Binary(16)
  name         String         @unique @db.VarChar(255)
  userTraining UserTraining[]
  @@map("training")
}

model User {
  id                           Bytes                    @id @db.Binary(16)
  firstName                    String                   @map("first_name") @db.VarChar(255)
  lastName                     String                   @map("last_name") @db.VarChar(255)
  email                        String                   @unique(map: "UNIQ_8D93D649E7927C74") @db.VarChar(180)
  roles                        String                   @db.LongText
  password                     String                   @db.VarChar(255)
  birthdate                    DateTime                 @db.Date
  pictureId                    String?                  @map("picture_id") @db.VarChar(255)
  snapchat                     String?                  @db.VarChar(100)
  instagram                    String?                  @db.VarChar(100)
  resetToken                   String?                  @map("reset_token") @db.VarChar(255)
  isVerified                   Boolean                  @map("is_verified")
  createdAt                    DateTime                 @map("created_at") @db.DateTime(0)
  updatedAt                    DateTime?                @map("updated_at") @db.DateTime(0)
  isActived                    Boolean                  @map("is_actived")
  isFilled                     Boolean                  @map("is_filled")
  androidPushnotificationToken String?                  @map("android_push_notification_token") @db.VarChar(255)
  sendbirdAccessToken          String?                  @map("sendbird_access_token") @db.VarChar(255)
  expoPushNotificationToken    String?                  @map("expo_push_notification_token") @db.VarChar(255)
  iosPushnotificationToken     String?                  @map("ios_push_notification_token") @db.VarChar(255)
  about                        String?                  @db.VarChar(255)
  locale                       String?                  @db.VarChar(255)
  group                        Group[]
  groupMembers                 GroupMembers[]
  groupMembershipRequest       GroupMembershipRequest[]
  notification                 Notification[]           @relation("userSource")
  notifications                Notification[]
  posts                        Post[]
  postComments                 PostComment[]
  tags                         Tag[]
  userTraining                 UserTraining?
  followers                    User[]                   @relation("followship")
  following                    User[]                   @relation("followship")
  postReactions                PostReaction[]
  @@map("user")
}

model UserTraining {
  id         Bytes     @id @db.Binary(16)
  userId     Bytes?    @unique @map("user_id") @db.Binary(16)
  trainingId Bytes     @map("training_id") @db.Binary(16)
  schoolId   Bytes     @map("school_id") @db.Binary(16)
  cityId     Bytes?     @map("city_id") @db.Binary(16)
  dateBegin  DateTime?  @map("date_begin") @db.Date
  dateEnd    DateTime? @map("date_end") @db.Date
  createdAt  DateTime  @map("created_at") @db.DateTime(0)
  updatedAt  DateTime? @map("updated_at") @db.DateTime(0)
  city       City?      @relation(fields: [cityId], references: [id], onUpdate: Restrict, map: "FK_359F6E8F8BAC62AF")
  school     School    @relation(fields: [schoolId], references: [id], onUpdate: Restrict, map: "FK_359F6E8FC32A47EE")
  training   Training  @relation(fields: [trainingId], references: [id], onUpdate: Restrict, map: "FK_359F6E8FBEFD98D1")
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_359F6E8FA76ED395")
  @@index([cityId], map: "IDX_359F6E8F8BAC62AF")
  @@index([userId], map: "IDX_359F6E8FA76ED395")
  @@index([trainingId], map: "IDX_359F6E8FBEFD98D1")
  @@index([schoolId], map: "IDX_359F6E8FC32A47EE")
  @@map("user_training")
}

model WaitingList {
  id    Bytes  @id @db.Binary(16)
  email String @db.VarChar(255)
  @@map("waiting_list")
}

model GroupMembershipRequest {
  id          Bytes     @id @db.Binary(16)
  userId      Bytes     @map("user_id") @db.Binary(16)
  groupInfoId Bytes     @map("group_info_id") @db.Binary(16)
  status      String    @db.VarChar(255)
  createdAt   DateTime  @map("created_at") @db.DateTime(0)
  updatedAt   DateTime? @map("updated_at") @db.DateTime(0)
  group       Group     @relation(fields: [groupInfoId], references: [id], onUpdate: Restrict, map: "FK_9D8B2166DB8B95F4")
  user        User      @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "FK_9D8B2166A76ED395")
  @@index([userId], map: "IDX_9D8B2166A76ED395")
  @@index([groupInfoId], map: "IDX_9D8B2166DB8B95F4")
  @@map("group_membership_request")
}

model Tag {
  id        String   @id @default(uuid())
  text      String   @unique @db.VarChar(30)
  createdAt DateTime @default(now())
  authorId  Bytes    @map("author_id") @db.Binary(16)
  isLive    Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  posts     Post[]
  @@index([authorId], map: "tag_author_id_fkey")
  @@map("tag")
}

model Post {
  id         String   @id @default(uuid())
  text       String   @db.Text
  createdAt  DateTime @unique @default(now())
  authorId   Bytes    @map("author_id") @db.Binary(16)
  author     User     @relation(fields: [authorId], references: [id])
  tags       Tag[]
  reactions  PostReaction[]
  viewsCount Int      @default(0)
  @@index([authorId], map: "post_author_id_fkey")
  @@map("post")
}

model PostComment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @unique @default(now())
  authorId  Bytes    @map("author_id") @db.Binary(16)
  author    User     @relation(fields: [authorId], references: [id])
  @@map("post_comment")
  @@index([authorId], map: "post_comment_author_id_fkey")
}

enum NotificationAction {
  seen
  add
  groupMembershipRequest
}

model PostReaction {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @unique @default(now())
  reaction  String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  authorId  Bytes    @db.Binary(16)
}