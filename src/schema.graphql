# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  accessToken: String!
  refreshToken: String!
}

input CheckPhoneNumberVerificationCodeInput {
  locale: String!
  phoneNumber: String!
  verificationCode: String!
}

type City {
  country: Country
  googlePlaceId: String
  id: ID!
  lat: String
  lng: String
  name: String!
}

type Country {
  id: ID!
  name: String!
}

input CreateCommentInput {
  postId: String!
  text: String!
}

input CreateLiveTagInput {
  text: String!
}

input CreateOrUpdatePostReactionInput {
  postId: String!
  reaction: String!
}

input CreatePostInput {
  tag: String!
  text: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  id: String!
}

input DeletePostReactionInput {
  postId: String!
}

input EmailSignInInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
}

type FriendRequest {
  fromUser: User
  id: ID!
  status: FriendRequestStatus
  toUser: User
}

enum FriendRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

input InitPhoneNumberVerificationInput {
  locale: String!
  phoneNumber: String!
}

type LastUsers {
  firstName: String!
  id: String!
  pictureId: String
}

type LiveTagAuthUser {
  authUserPosted: Boolean!
  id: String!
  lastUsers: [LastUsers!]
  postCount: Int!
  text: String!
}

type Me {
  about: String
  avatar3dId: String
  birthdate: DateTime
  email: String
  expoPushNotificationTokens: [String!]
  firstName: String
  friends(after: String, limit: Int = 10): PaginatedUsers
  friendsCount: Int
  id: ID!
  instagram: String
  isFilled: Boolean
  lastName: String
  locale: String
  phoneNumber: String
  pictureId: String
  posts(after: String, limit: Int = 10, schoolId: String, tag: String, userId: String): PaginatedPosts
  school: School
  sendbirdAccessToken: String
  snapchat: String
  training: Training
}

type Mutation {
  acceptFriendRequest(friendRequestId: String!): Boolean!
  addExpoPushNotificationsToken(input: String!): Boolean!
  checkPhoneNumberVerificationCode(input: CheckPhoneNumberVerificationCodeInput!): AccessToken!
  createFriendRequest(otherUserId: String!): FriendRequest!
  createLiveTag(input: CreateLiveTagInput!): Tag!
  createOrUpdatePostReaction(input: CreateOrUpdatePostReactionInput!): Boolean!
  createPost(input: CreatePostInput!): Post!
  createPostComment(input: CreateCommentInput!): Boolean!
  declineFriendRequest(friendRequestId: String!): Boolean!
  deleteAuthUser: Boolean!
  deleteExpoPushNotificationsToken(input: String!): Boolean!
  deletePost(input: DeletePostInput!): Boolean!
  deletePostReaction(input: DeletePostReactionInput!): Boolean!
  emailSignIn(input: EmailSignInInput!): AccessToken!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  initPhoneNumberVerification(input: InitPhoneNumberVerificationInput!): Boolean!
  markNotificationAsRead(notificationId: String!): Boolean!
  refreshAccessToken(refreshToken: String!): AccessToken!
  refreshSendbirdAccessToken: SendbirdAccessToken!
  resetPassword(input: ResetPasswordInput!): AccessToken!
  trackPostViews(postsIds: [String!]!): Boolean!
  unfriend(otherUserId: String!): Boolean!
  updateMe(input: UpdateUserInput!): Me!
}

type Notification {
  createdAt: DateTime!
  friendRequest: FriendRequest
  id: ID!
  isSeen: Boolean
  postReaction: PostReaction
}

type PaginatedNotifications {
  items: [Notification!]!
  nextCursor: String!
}

type PaginatedPosts {
  items: [Post!]!
  nextCursor: String!
}

type PaginatedTrends {
  items: [Trend!]!
  nextSkip: Int!
}

type PaginatedUsers {
  items: [User!]!
  nextCursor: String!
}

type Post {
  author: User!
  comments: [PostComment!]
  createdAt: DateTime!
  id: ID!
  tags: [Tag!]!
  text: String!
  viewsCount: Int!
}

type PostComment {
  author: User!
  authorId: String!
  createdAt: DateTime
  id: ID!
  text: String!
}

type PostReaction {
  author: User
  createdAt: DateTime
  id: ID!
  postId: String
  reaction: String!
}

type Query {
  getS3PresignedUploadUrl: Upload!
  liveTag: LiveTagAuthUser
  me: Me!
  notifications(after: String, limit: Int = 10): PaginatedNotifications!
  post(id: String!): Post!
  posts(after: String, limit: Int = 10, schoolId: String, tag: String, userId: String): PaginatedPosts!
  school(googlePlaceId: String, id: String): School
  tag(id: String): Tag!
  trends(limit: Int = 10, skip: Int): PaginatedTrends!
  unreadNotificationsCount: Int!
  user(id: String!): User!
}

input ResetPasswordInput {
  password: String!
  resetToken: String!
}

type School {
  city: City
  googlePlaceId: String
  id: ID!
  lat: Float
  lng: Float
  name: String
  posts(after: String, limit: Int = 10, schoolId: String, tag: String, userId: String): PaginatedPosts
  totalUsersCount: Int
  users: [User!]
}

type SendbirdAccessToken {
  sendbirdAccessToken: String!
}

type Tag {
  author: User
  createdAt: DateTime
  id: ID!
  isLive: Boolean
  lastUsers: [User!]
  postCount: Int
  posts(after: String, limit: Int = 10, schoolId: String, tag: String, userId: String): PaginatedPosts
  text: String!
}

type Training {
  id: ID!
  name: String!
}

type Trend {
  author: User
  id: ID!
  lastUsers: [User!]
  postCount: Int
  text: String!
}

input UpdateUserInput {
  about: String
  avatar3dId: String
  birthdate: DateTime
  email: String
  firstName: String
  instagram: String
  isFilled: Boolean
  lastName: String
  password: String
  pictureId: String
  schoolGooglePlaceId: String
  snapchat: String
  trainingName: String
}

type Upload {
  key: String!
  url: String!
}

type User {
  about: String
  authUserFriendRequestFromUser: FriendRequest
  authUserFriendRequestToUser: FriendRequest
  avatar3dId: String
  birthdate: DateTime
  commonFriends(after: String, limit: Int = 10): PaginatedUsers
  commonFriendsCount: Int
  firstName: String
  friends(after: String, limit: Int = 10): PaginatedUsers
  friendsCount: Int
  id: ID!
  instagram: String
  isAuthUserFriend: Boolean
  lastName: String
  locale: String
  pictureId: String
  posts(after: String, limit: Int = 10, schoolId: String, tag: String, userId: String): PaginatedPosts
  school: School
  snapchat: String
  training: Training
}
