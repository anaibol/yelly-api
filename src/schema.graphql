# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  accessToken: String!
  isNewUser: Boolean
  refreshToken: String!
}

type AgeVerificationResult {
  ageEstimation: Int
  agePredictionResult: String
  isAgeApproved: Boolean!
}

"""BigInt scalar type"""
scalar BigInt

input CheckPhoneNumberVerificationCodeInput {
  locale: String!
  phoneNumber: String!
  verificationCode: String!
}

type City {
  country: Country
  googlePlaceId: String
  id: ID!
  lat: String
  lng: String
  name: String!
}

type Country {
  code: String!
  id: ID!
}

input CreateOrUpdatePostReactionInput {
  postId: BigInt!
  text: String!
}

input CreateOrUpdateTagReactionInput {
  tagId: BigInt!
  text: String!
}

input CreatePostInput {
  emojis: [String!]
  expiresIn: Int
  parentId: BigInt
  pollOptions: [String!]
  tags: [String!]
  text: String!
}

input CreatePostPollVoteInput {
  optionId: BigInt!
  postId: BigInt!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  postId: BigInt!
}

input DeletePostReactionInput {
  postId: BigInt!
}

input DeleteTagReactionInput {
  tagId: BigInt!
}

input EmailSignInInput {
  email: String!
  password: String!
}

type Feed {
  items: [FeedItem!]!
  nextCursor: BigInt
  totalCount: Int!
}

type FeedItem {
  createdAt: DateTime
  id: BigInt!
  post: Post
  type: FeedItemType
}

enum FeedItemType {
  FOLLOWEE_POSTED
  POST_REPLIED
  SAME_POST_REPLIED
  SAME_SCHOOL_POSTED
}

type FollowRequest {
  id: ID!
  requester: User
  status: FollowRequestStatus
  toFollowUser: User
}

enum FollowRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

input ForgotPasswordInput {
  email: String!
}

input InitPhoneNumberVerificationInput {
  locale: String!
  phoneNumber: String!
}

type Me {
  about: String
  birthdate: DateTime
  canCreateTag: Boolean!
  countryId: String
  createdAt: DateTime
  email: String
  expoPushNotificationTokens: [String!]
  firstName: String
  followees(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followeesCount: Int
  followers(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followersCount: Int
  id: ID!
  instagram: String
  isAgeApproved: Boolean
  isFilled: Boolean
  lastName: String
  locale: String
  phoneNumber: String
  pictureId: String
  postCount: Int
  posts(after: BigInt, limit: Int = 10): PaginatedPosts
  role: UserRole!
  school: School
  sendbirdAccessToken: String
  snapchat: String
  training: Training
  viewsCount: Int
}

type Mutation {
  acceptFollowRequest(followRequestId: String!): Boolean!
  addExpoPushNotificationsToken(input: String!): Boolean!
  banUser(userId: String!): Boolean!
  checkPhoneNumberVerificationCode(input: CheckPhoneNumberVerificationCodeInput!): AccessToken!
  createFollowRequest(otherUserId: String!): FollowRequest!
  createOrUpdatePostReaction(input: CreateOrUpdatePostReactionInput!): PostReaction!
  createOrUpdateTagReaction(input: CreateOrUpdateTagReactionInput!): TagReaction!
  createPost(input: CreatePostInput!): Post!
  createPostPollVote(input: CreatePostPollVoteInput!): Post!
  createPromotedTag(tagText: String!): Tag!
  declineFollowRequest(followRequestId: String!): Boolean!
  deleteAuthUser: Boolean!
  deleteExpoPushNotificationsToken(input: String!): Boolean!
  deleteFollowRequest(followRequestId: String!): Boolean!
  deleteFollower(otherUserId: String!): Boolean!
  deletePost(input: DeletePostInput!): Boolean!
  deletePostReaction(input: DeletePostReactionInput!): Boolean!
  deleteTagReaction(input: DeleteTagReactionInput!): Boolean!
  deleteUser(userId: String!): Boolean!
  deleteUserFeedCursors: Boolean!
  emailSignIn(input: EmailSignInInput!): AccessToken!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  initPhoneNumberVerification(input: InitPhoneNumberVerificationInput!): Boolean!
  markFeedItemsAsSeen(after: DateTime, before: DateTime, feedItemId: BigInt): Boolean!
  markNotificationAsSeen(notificationId: String!): Boolean!
  markTrendAsSeen(cursor: String!, tagId: BigInt!): Boolean!
  refreshAccessToken(refreshToken: String!): AccessToken!
  refreshSendbirdAccessToken: SendbirdAccessToken!
  resetPassword(input: ResetPasswordInput!): AccessToken!
  trackPostViews(postIds: [BigInt!]!): Boolean!
  trackTagViews(tagIds: [BigInt!]!): Boolean!
  trackUserView(userId: String!): Boolean!
  unFollow(otherUserId: String!): Boolean!
  updateAgeVerification(facePictureId: String!): AgeVerificationResult!
  updateMe(input: UpdateUserInput!): Me!
  updateTag(input: UpdateTagInput!, tagId: BigInt!): Tag!
}

type Notification {
  createdAt: DateTime!
  followRequest: FollowRequest
  id: ID!
  isSeen: Boolean
  postReaction: PostReaction
  type: NotificationType
}

enum NotificationType {
  FOLLOW_REQUEST_ACCEPTED
  FOLLOW_REQUEST_PENDING
  POST_REACTION
}

type OffsetPaginatedPosts {
  items: [Post!]!
  nextSkip: Int!
}

type PaginatedNotifications {
  items: [Notification!]!
  nextSkip: Int
}

type PaginatedPosts {
  items: [Post!]!
  nextCursor: BigInt
}

type PaginatedTags {
  items: [Tag!]!
  nextSkip: Int!
}

type PaginatedTrends {
  items: [Trend!]!
  nextSkip: Int!
}

type PaginatedUsers {
  items: [User!]!
  nextSkip: Int
  totalCount: Int
}

type Post {
  authUserPollVote: PostPollVote
  authUserReaction: PostReaction
  author: User
  charsCount: Int
  children: PaginatedPosts
  childrenCount: Int
  createdAt: DateTime
  expiresAt: DateTime
  expiresIn: Int
  id: BigInt!
  parent: Post
  pollOptions: [PostPollOption!]
  reactions: [PostReaction!]
  reactionsCount: Int
  score: Int
  tags: [Tag!]
  text: String
  threadId: BigInt
  viewsCount: Int
  wordsCount: Int
}

type PostPollOption {
  id: BigInt!
  text: String
  votesCount: Int
}

type PostPollVote {
  id: BigInt!
  option: PostPollOption
  post: Post
}

type PostReaction {
  author: User
  id: BigInt!
  post: Post
  text: String
}

type Query {
  feed(after: BigInt, isSeen: Boolean, limit: Int = 10): Feed!
  followSuggestions(limit: Int = 10, skip: Int = 0): PaginatedUsers!
  getS3PresignedUploadUrl: Upload!
  me: Me!
  notifications(limit: Int = 10, skip: Int = 0): PaginatedNotifications!
  post(after: BigInt, limit: Int = 10, postId: BigInt!): Post!
  school(googlePlaceId: String, id: String): School
  tag(tagId: BigInt!): Tag!
  tagExists(text: String!): Boolean!
  tags(date: String = "2022-06-29", isEmoji: Boolean = false, limit: Int = 10, showHidden: Boolean = false, skip: Int = 0, sortBy: TagSortBy = createdAt, sortDirection: SortDirection = desc): PaginatedTags!
  trend(limit: Int = 10, skip: Int = 0, tagId: BigInt!): Trend!
  trends(limit: Int = 10, skip: Int = 0): PaginatedTrends!
  unreadFeedItemsCount: Int!
  unreadNotificationsCount: Int!
  user(id: String!): User!
  users(ids: [String!]!): PaginatedUsers!
}

input ResetPasswordInput {
  password: String!
  resetToken: String!
}

type School {
  city: City
  distance: Float
  googlePlaceId: String
  id: ID!
  lat: Float
  lng: Float
  name: String
  posts: PaginatedPosts
  totalUsersCount: Int
  users: [User!]
}

type SendbirdAccessToken {
  sendbirdAccessToken: String!
}

enum SortDirection {
  asc
  desc
}

type Tag {
  authUserReaction: TagReaction
  author: User
  createdAt: DateTime
  id: BigInt!
  isEmoji: Boolean
  isHidden: Boolean
  isLive: Boolean
  postCount: Int
  posts(after: BigInt, limit: Int = 10): PaginatedPosts
  reactionsCount: Int
  text: String!
  viewsCount: Int
}

type TagReaction {
  author: User
  id: BigInt!
  tag: Tag
  text: String
}

enum TagSortBy {
  createdAt
  postCount
  reactionsCount
}

type Training {
  id: ID!
  name: String!
}

type Trend {
  author: User
  createdAt: DateTime
  id: BigInt!
  isEmoji: Boolean
  isLive: Boolean
  nextCursor: String
  postCount: Int
  posts: OffsetPaginatedPosts
  reactionsCount: Int
  score: Int
  text: String!
  viewsCount: Int
}

input UpdateTagInput {
  isHidden: Boolean
}

input UpdateUserInput {
  about: String
  birthdate: DateTime
  email: String
  firstName: String
  instagram: String
  isFilled: Boolean
  lastName: String
  password: String
  pictureId: String
  schoolGooglePlaceId: String
  snapchat: String
  trainingName: String
}

type Upload {
  key: String!
  url: String!
}

type User {
  about: String
  birthdate: DateTime
  countryId: String
  createdAt: DateTime
  firstName: String
  followees(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followeesCount: Int
  followers(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followersCount: Int
  id: ID!
  instagram: String
  isFollowedByAuthUser: Boolean
  lastName: String
  locale: String
  pendingFollowRequestFromUser: FollowRequest
  pendingFollowRequestToUser: FollowRequest
  pictureId: String
  postCount: Int
  posts(after: BigInt, limit: Int = 10): PaginatedPosts
  school: School
  snapchat: String
  training: Training
  viewsCount: Int
}

enum UserRole {
  ADMIN
  USER
}
