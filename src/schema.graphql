# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  accessToken: String!
  isNewUser: Boolean
  refreshToken: String!
}

type Activities {
  items: [Activity!]!
  nextCursor: BigInt
  totalCount: Int!
}

type Activity {
  createdAt: DateTime
  id: BigInt!
  mentionedUser: User
  post: Post
  tag: Tag
  type: ActivityType
  user: User
}

enum ActivityType {
  CREATED_POST
  CREATED_POST_USER_MENTION
  CREATED_TAG
  CREATED_TAG_REACTION
}

type AgeVerificationResult {
  ageEstimation: Int
  agePredictionResult: String
  isAgeApproved: Boolean
}

"""BigInt scalar type"""
scalar BigInt

input CheckPhoneNumberVerificationCodeInput {
  locale: String!
  phoneNumber: String!
  verificationCode: String!
}

type City {
  country: Country
  googlePlaceId: String
  id: ID!
  lat: String
  lng: String
  name: String!
}

type Country {
  code: String!
  id: ID!
}

input CreateAnonymousTagReactionInput {
  tagNanoId: String!
}

input CreateOrUpdatePostReactionInput {
  postId: BigInt!
  text: String!
}

input CreateOrUpdateTagReactionInput {
  tagId: BigInt!
  text: String!
}

input CreatePostInput {
  mentionedUserIds: [String!]
  parentId: BigInt
  pollOptions: [String!]
  tagIds: [BigInt!]
  text: String!
}

input CreatePostPollVoteInput {
  optionId: BigInt!
  postId: BigInt!
}

input CreateTagInput {
  tagText: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  postId: BigInt!
}

input DeletePostReactionInput {
  postId: BigInt!
}

input DeleteTagReactionInput {
  tagId: BigInt!
}

input EmailSignInInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
}

input InitPhoneNumberVerificationInput {
  locale: String!
  phoneNumber: String!
}

type Me {
  about: String
  birthdate: DateTime
  countryId: String
  createdAt: DateTime
  email: String
  expoPushNotificationTokens: [String!]
  firstName: String
  followeesCount: Int
  followersCount: Int
  id: ID!
  instagram: String
  isAgeApproved: Boolean
  isFilled: Boolean
  lastName: String
  locale: String
  phoneNumber: String
  pictureId: String
  postCount: Int
  role: UserRole!
  school: School
  snapchat: String
  tagCount: Int
  tagReactionsCount: Int
  tagViewsCount: Int
  training: Training
  trendingTagsCount: Int
  viewsCount: Int
}

type Mutation {
  addExpoPushNotificationsToken(input: String!): Boolean!
  banUser(userId: String!): Boolean!
  blockUser(otherUserId: String!): Boolean!
  checkPhoneNumberVerificationCode(input: CheckPhoneNumberVerificationCodeInput!): AccessToken!
  createAnonymousTagReaction(input: CreateAnonymousTagReactionInput!): Boolean!
  createOrUpdatePostReaction(input: CreateOrUpdatePostReactionInput!): PostReaction!
  createOrUpdateTagReaction(input: CreateOrUpdateTagReactionInput!): TagReaction!
  createPost(input: CreatePostInput!): Post!
  createPostPollVote(input: CreatePostPollVoteInput!): Post!
  createPromotedTag(tagText: String!): Tag!
  createTag(input: CreateTagInput!): Tag!
  deleteAuthUser: Boolean!
  deleteExpoPushNotificationsToken(input: String!): Boolean!
  deleteFollower(otherUserId: String!): Boolean!
  deletePost(input: DeletePostInput!): Boolean!
  deletePostReaction(input: DeletePostReactionInput!): Boolean!
  deleteTagReaction(input: DeleteTagReactionInput!): Boolean!
  deleteUser(userId: String!): Boolean!
  emailSignIn(input: EmailSignInInput!): AccessToken!
  follow(otherUserId: String!): Boolean!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  initPhoneNumberVerification(input: InitPhoneNumberVerificationInput!): Boolean!
  markNotificationAsSeen(notificationId: String!): Boolean!
  refreshAccessToken(refreshToken: String!): AccessToken!
  reportUser(otherUserId: String!): Boolean!
  resetPassword(input: ResetPasswordInput!): AccessToken!
  trackPostViews(postIds: [BigInt!]!): Boolean!
  trackTagViews(tagIds: [BigInt!]!): Boolean!
  trackUserView(userId: String!): Boolean!
  unBlockUser(otherUserId: String!): Boolean!
  unFollow(otherUserId: String!): Boolean!
  updateAgeVerification(facePictureId: String!): AgeVerificationResult!
  updateMe(input: UpdateUserInput!): Me!
  updateTag(input: UpdateTagInput!, tagId: BigInt!): Tag!
}

type Notification {
  createdAt: DateTime!
  followerUser: User
  id: ID!
  isSeen: Boolean
  newPostCount: Int
  post: Post
  postReaction: PostReaction
  postUserMention: PostUserMention
  tag: Tag
  tagReaction: TagReaction
  type: NotificationType
}

enum NotificationType {
  IS_NOW_FOLLOWING_YOU
  REACTED_TO_YOUR_POST
  REACTED_TO_YOUR_TAG
  REPLIED_TO_SAME_POST_AS_YOU
  REPLIED_TO_YOUR_POST
  THERE_ARE_NEW_POSTS_ON_YOUR_TAG
  USER_MENTIONED_YOU
  YOUR_TAG_IS_TRENDING
}

type PaginatedNotifications {
  items: [Notification!]!
  nextSkip: Int
}

type PaginatedPosts {
  items: [Post!]!
  nextCursor: BigInt
}

type PaginatedTags {
  items: [Tag!]!
  nextCursor: BigInt
  totalCount: Int!
}

type PaginatedTagsByScore {
  items: [Tag!]!
  nextCursor: BigInt
  nextSkip: Int
  totalCount: Int!
}

type PaginatedUsers {
  items: [User!]!
  nextSkip: Int
  totalCount: Int
}

type Post {
  authUserPollVote: PostPollVote
  authUserReaction: PostReaction
  author: User
  charsCount: Int
  children: PaginatedPosts
  childrenCount: Int
  createdAt: DateTime
  id: BigInt!
  isReadOnly: Boolean
  mentionedUsers: [User!]
  parent: Post
  pollOptions: [PostPollOption!]
  reactions: [PostReaction!]
  reactionsCount: Int
  score: Int
  tags: [Tag!]
  text: String
  viewsCount: Int
  wordsCount: Int
}

type PostPollOption {
  id: BigInt!
  text: String
  votesCount: Int
}

type PostPollVote {
  id: BigInt!
  option: PostPollOption
  post: Post
}

type PostReaction {
  author: User
  id: BigInt!
  post: Post
  text: String
}

type PostUserMention {
  id: BigInt!
  post: Post
}

enum PostsSortBy {
  childrenCount
  createdAt
  reactionsCount
}

type Query {
  activities(after: BigInt, limit: Int = 10): Activities!
  authUserCanCreateTag: Boolean!
  followSuggestions(limit: Int = 10, skip: Int = 0): PaginatedUsers!
  getLastResetDate: DateTime!
  getNextResetDate: DateTime!
  getPreviousResetDate: DateTime!
  getS3PresignedUploadUrl: Upload!
  isUserFollowedByAuthUser(userId: String!): Boolean!
  me: Me!
  notifications(limit: Int = 10, skip: Int = 0): PaginatedNotifications!
  post(after: BigInt, limit: Int = 10, postId: BigInt!): Post!
  posts(after: BigInt, authorId: String, limit: Int = 10, sortBy: PostsSortBy = reactionsCount, sortDirection: SortDirection = desc, tagId: BigInt): PaginatedPosts!
  school(googlePlaceId: String, id: String): School
  tag(tagId: BigInt!): Tag!
  tagByNanoId(tagNanoId: String!): Tag!
  tagExists(tagText: String!): Boolean!
  tags(after: BigInt, authorId: String, isYesterday: Boolean = false, limit: Int = 10, showHidden: Boolean = false, sortBy: TagSortBy = createdAt, sortDirection: SortDirection = desc): PaginatedTags!
  tagsByScore(limit: Int = 10, skip: Int = 0): PaginatedTagsByScore!
  unreadNotificationsCount: Int!
  user(id: String!): User!
  userActivities(after: BigInt, limit: Int = 10, userId: String!): Activities!
  userFollowees(firstNameStartsWith: String, limit: Int = 10, skip: Int = 0, sortBy: UserFolloweesSortBy = createdAt, sortDirection: SortDirection = desc, userId: String!): PaginatedUsers!
  userFollowers(limit: Int = 10, skip: Int = 0, userId: String!): PaginatedUsers!
  users(ids: [String!]!): PaginatedUsers!
}

input ResetPasswordInput {
  password: String!
  resetToken: String!
}

type School {
  city: City
  distance: Float
  googlePlaceId: String
  id: ID!
  lat: Float
  lng: Float
  name: String
  posts: PaginatedPosts
  totalUsersCount: Int
  users: [User!]
}

enum SortDirection {
  asc
  desc
}

type Tag {
  authUserReaction: TagReaction
  author: User
  createdAt: DateTime
  id: BigInt!
  isHidden: Boolean
  isReadOnly: Boolean
  nanoId: String
  postCount: Int
  posts: PaginatedPosts
  reactionsCount: Int
  score: Float
  text: String!
  viewsCount: Int
}

type TagReaction {
  author: User
  id: BigInt!
  tag: Tag
  text: String
}

enum TagSortBy {
  createdAt
  postCount
  reactionsCount
}

type Training {
  id: ID!
  name: String!
}

input UpdateTagInput {
  isHidden: Boolean
}

input UpdateUserInput {
  about: String
  birthdate: DateTime
  email: String
  firstName: String
  instagram: String
  isFilled: Boolean
  lastName: String
  password: String
  pictureId: String
  schoolGooglePlaceId: String
  snapchat: String
  trainingName: String
}

type Upload {
  key: String!
  url: String!
}

type User {
  about: String
  birthdate: DateTime
  countryId: String
  createdAt: DateTime
  firstName: String
  followeesCount: Int
  followersCount: Int
  id: ID!
  instagram: String
  isBlockedByAuthUser: Boolean
  isFollowedByAuthUser: Boolean
  lastName: String
  locale: String
  pictureId: String
  postCount: Int
  school: School
  snapchat: String
  tagCount: Int
  tagReactionsCount: Int
  tagViewsCount: Int
  training: Training
  trendingTagsCount: Int
  viewsCount: Int
}

enum UserFolloweesSortBy {
  createdAt
  firstName
}

enum UserRole {
  ADMIN
  USER
}
