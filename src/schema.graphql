# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  accessToken: String!
  refreshToken: String!
}

input CheckPhoneNumberVerificationCodeInput {
  locale: String!
  phoneNumber: String!
  verificationCode: String!
}

type City {
  country: Country
  googlePlaceId: String
  id: ID!
  lat: String
  lng: String
  name: String!
}

type Country {
  code: String!
  id: ID!
}

input CreateOrUpdateLiveTagInput {
  isLive: Boolean!
  text: String!
}

input CreatePostInput {
  emojis: [String!]
  expiresIn: Int
  parentId: String
  pollOptions: [String!]
  tags: [String!]
  text: String!
}

input CreatePostPollVoteInput {
  optionId: String!
  postId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  id: String!
}

input DeletePostReactionInput {
  postId: String!
}

input EmailSignInInput {
  email: String!
  password: String!
}

type FollowRequest {
  id: ID!
  requester: User
  status: FollowRequestStatus
  toFollowUser: User
}

enum FollowRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

input ForgotPasswordInput {
  email: String!
}

input InitPhoneNumberVerificationInput {
  locale: String!
  phoneNumber: String!
}

type Me {
  about: String
  avatar3dId: String
  birthdate: DateTime
  email: String
  expoPushNotificationTokens: [String!]
  firstName: String
  followees(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followeesCount: Int
  followers(limit: Int = 10, skip: Int = 0): PaginatedUsers
  followersCount: Int
  id: ID!
  instagram: String
  isFilled: Boolean
  lastName: String
  locale: String
  phoneNumber: String
  pictureId: String
  postCount: Int
  posts(after: String, forYou: Boolean, limit: Int = 10): PaginatedPosts
  role: UserRole!
  school: School
  sendbirdAccessToken: String
  snapchat: String
  training: Training
}

type Mutation {
  acceptFollowRequest(followRequestId: String!): Boolean!
  addExpoPushNotificationsToken(input: String!): Boolean!
  banUser(userId: String!): Boolean!
  checkPhoneNumberVerificationCode(input: CheckPhoneNumberVerificationCodeInput!): AccessToken!
  createFollowRequest(otherUserId: String!): FollowRequest!
  createOrUpdateLiveTag(input: CreateOrUpdateLiveTagInput!): Tag!
  createPost(input: CreatePostInput!): Post!
  createPostPollVote(input: CreatePostPollVoteInput!): Post!
  declineFollowRequest(followRequestId: String!): Boolean!
  deleteAuthUser: Boolean!
  deleteExpoPushNotificationsToken(input: String!): Boolean!
  deleteFollowRequest(followRequestId: String!): Boolean!
  deleteFollower(otherUserId: String!): Boolean!
  deletePost(input: DeletePostInput!): Boolean!
  deletePostReaction(input: DeletePostReactionInput!): Boolean!
  deleteUser(userId: String!): Boolean!
  emailSignIn(input: EmailSignInInput!): AccessToken!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  initPhoneNumberVerification(input: InitPhoneNumberVerificationInput!): Boolean!
  markNotificationAsSeen(notificationId: String!): Boolean!
  refreshAccessToken(refreshToken: String!): AccessToken!
  refreshSendbirdAccessToken: SendbirdAccessToken!
  resetPassword(input: ResetPasswordInput!): AccessToken!
  trackPostViews(postsIds: [String!]!): Boolean!
  unFollow(otherUserId: String!): Boolean!
  updateMe(input: UpdateUserInput!): Me!
}

type Notification {
  createdAt: DateTime!
  followRequest: FollowRequest
  id: ID!
  isSeen: Boolean
  post: Post
  postReaction: PostReaction
  type: NotificationType
}

enum NotificationType {
  FOLLOWEE_POSTED
  FOLLOW_REQUEST_ACCEPTED
  FOLLOW_REQUEST_PENDING
  POST_REPLIED
  SAME_POST_REPLIED
}

type PaginatedNotifications {
  items: [Notification!]!
  nextSkip: Int
}

type PaginatedPosts {
  items: [Post!]!
  nextCursor: String!
}

type PaginatedTrends {
  items: [Tag!]!
  nextSkip: Int!
}

type PaginatedUsers {
  items: [User!]!
  nextSkip: Int
}

type Post {
  authUserPollVote: PostPollVote
  author: User
  children: PaginatedPosts
  childrenCount: Int
  createdAt: DateTime
  expiresAt: DateTime
  expiresIn: Int
  id: ID!
  parent: Post
  pollOptions: [PostPollOption!]
  tags: [Tag!]
  text: String
  viewsCount: Int
}

type PostPollOption {
  id: ID!
  text: String
  votesCount: Int
}

type PostPollVote {
  id: ID!
  option: PostPollOption
  post: Post
}

type PostReaction {
  author: User
  createdAt: DateTime
  id: ID!
  postId: String
  reaction: String!
}

type Query {
  getS3PresignedUploadUrl: Upload!
  liveTags: [Tag!]!
  me: Me!
  notifications(limit: Int = 10, skip: Int = 0): PaginatedNotifications!
  post(after: String, id: String!, limit: Int = 10): Post!
  posts(after: String, forYou: Boolean, limit: Int = 10): PaginatedPosts!
  school(googlePlaceId: String, id: String): School
  tag(text: String): Tag!
  trends(isEmoji: Boolean = false, limit: Int = 10, skip: Int = 0): PaginatedTrends!
  unreadNotificationsCount: Int!
  user(id: String!): User!
}

input ResetPasswordInput {
  password: String!
  resetToken: String!
}

type School {
  city: City
  distance: Float
  googlePlaceId: String
  id: ID!
  lat: Float
  lng: Float
  name: String
  posts: PaginatedPosts
  totalUsersCount: Int
  users: [User!]
}

type SendbirdAccessToken {
  sendbirdAccessToken: String!
}

type Tag {
  authUserPosted: Boolean
  createdAt: DateTime
  id: ID!
  isEmoji: Boolean
  isLive: Boolean
  postCount: Int
  posts(after: String, forYou: Boolean, limit: Int = 10): PaginatedPosts
  text: String!
}

type Training {
  id: ID!
  name: String!
}

input UpdateUserInput {
  about: String
  avatar3dId: String
  birthdate: DateTime
  email: String
  firstName: String
  instagram: String
  isFilled: Boolean
  lastName: String
  password: String
  pictureId: String
  schoolGooglePlaceId: String
  snapchat: String
  trainingName: String
}

type Upload {
  key: String!
  url: String!
}

type User {
  about: String
  avatar3dId: String
  birthdate: DateTime
  firstName: String
  id: ID!
  instagram: String
  isFollowedByAuthUser: Boolean
  lastName: String
  locale: String
  pendingFollowRequestFromUser: FollowRequest
  pendingFollowRequestToUser: FollowRequest
  pictureId: String
  postCount: Int
  posts(after: String, forYou: Boolean, limit: Int = 10): PaginatedPosts
  school: School
  snapchat: String
  training: Training
}

enum UserRole {
  ADMIN
  USER
}
