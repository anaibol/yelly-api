name: Deploy development to Amazon ECS

on:
  push:
    branches: [develop]

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: 968886285118.dkr.ecr.eu-west-2.amazonaws.com
  ECR_REPOSITORY: yelly_app
  IMAGE_TAG: latest
  #IMAGE_TAG: ${{ github.sha }} # Tag Commit large (git)
  #ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  ECS_CLUSTER: Dev-YELLY
  ECS_SERVICE: service-dev-yelly-8080
  ECS_TASK_DEFINITION: task-dev-yelly-8080
  ECS_CONTAINER_NAME: dev-yelly

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        #env:
        #  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #  IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} --build-arg AMPLITUDE_API_KEY=${{ secrets.AMPLITUDE_API_KEY }} --build-arg GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} --build-arg EXPO_ACCESS_TOKEN=${{ secrets.EXPO_ACCESS_TOKEN }} --build-arg NEO4J_USER=${{ secrets.NEO4J_USER }} --build-arg NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }} --build-arg NEO4J_URI=${{ secrets.NEO4J_URI }} --build-arg APP_BASE_URL=${{ secrets.APP_BASE_URL }} --build-arg YOTI_CLIEND_SDK_ID=${{ secrets.YOTI_CLIEND_SDK_ID }} --build-arg YOTI_KEY_FILE_PATH=${{ secrets.YOTI_KEY_FILE_PATH }} --build-arg APOLLO_GRAPH_ID=${{ secrets.APOLLO_GRAPH_ID }} --build-arg APOLLO_GRAPH_VARIANT=${{ secrets.APOLLO_GRAPH_VARIANT }} --build-arg APOLLO_KEY=${{ secrets.APOLLO_KEY }} --build-arg APOLLO_SCHEMA_REPORTING=${{ secrets.APOLLO_SCHEMA_REPORTING }} --build-arg ALGOLIA_INDEX_PREFIX=${{ secrets.ALGOLIA_INDEX_PREFIX }} --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} --build-arg SENDBIRD_BASE_URL=${{ secrets.SENDBIRD_BASE_URL }} --build-arg SENDBIRD_TOKEN=${{ secrets.SENDBIRD_TOKEN }} --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} --build-arg DATABASE_READ_URL=${{ secrets.DATABASE_READ_URL }} --build-arg ALGOLIA_API_KEY=${{ secrets.ALGOLIA_API_KEY }} --build-arg ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }} --build-arg ALGOLIA_INDEX_PREFIX=${{ secrets.ALGOLIA_INDEX_PREFIX }} --build-arg EMAIL_PROVIDER_API_KEY=${{ secrets.EMAIL_PROVIDER_API_KEY }} --build-arg TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }} --build-arg TWILIO_AUTH_TOKEN="${{ secrets.TWILIO_AUTH_TOKEN }}" --build-arg TWILIO_VERIFICATION_SERVICE_SID=${{ secrets.TWILIO_VERIFICATION_SERVICE_SID }} -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}
          echo "::set-output name=image::${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
